[
  {
    "npcID": 0,
    "dialogos": [
      "Greetings, adventurer! It seems you've been chosen to face the challenges of our kingdom. This is a world full of knowledge, but also of challenges. Here, you will learn valuable Java skills, explore dungeons, and solve problems to defeat our enemies, 'Bugger' and his henchmen, 'the bugs'. These creatures have taken control of our lands and roads, blocking traffic between neighboring towns.",
      "Your mission is simple: advance through our villages learning from our people and show what you know by overcoming the 'bugs' in their dungeons. If you succeed, you will be ready to face 'Bugger' and save our civilization. Now, look for the villagers' huts! They will teach you what you need to know. Good luck facing those villains, your fortune will be ours.",
      "Get ready to learn, fight, and debug this world of errors!"
    ]
  },
  {
    "npcID": 1,
    "dialogos": [
      "Ah, young adventurer! Today, I'll tell you something very important in the world of programming: output!",
      "Imagine that many programs we use are made to give us information at some point. Have you ever seen a message like 'You have a new message'? That's an output. Or think about when you're playing and 'Game Over' appears on the screen... that's also an output! And when you check your balance in the bank app, the number you see is, yes, an output.",
      "The simplest form of output in programming is a message that appears on the screen. Don't forget this concept, as you'll see it a lot in your learning adventure!"
    ]
  },
  {
    "npcID": 2,
    "dialogos": [
      "Did you know that programmers use outputs to ensure the computer is doing what they want? They also use them to find and fix errors.",
      "For example, if you wanted to display something on the screen, like the famous Java slogan, you could write this line of code: \n\nSystem.out.println(\"Write once, run anywhere!\");",
      "When you run this code, you'll see that message appear on the screen. It's a cool way to communicate with the program while working on it!"
    ]
  },
  {
    "npcID": 3,
    "dialogos": [
      "Ah, I see you're learning quickly! Let me explain something important: in programming, every line of code you write is called a statement. It's like you're giving orders to the computer, one at a time.",
      "For example, imagine you want the program to greet you. You could use this statement:\n\nSystem.out.println(\"Hello, adventurer!\");",
      "Now, a question for you: what do you think would happen if you forget to put the semicolon (;) at the end of that line? Think about it... \n\nCorrect, the program wouldn't work! The computer needs that semicolon to know that your order is complete.",
      "So, every time you write a statement, remember to close it with that little detail. Ready to keep learning?"
    ]
  },
  {
    "npcID": 4,
    "dialogos": [
      "It seems you're becoming an expert in statements! Let me tell you something cool: you can write as many statements as you want in your code. It's like having a conversation with the computer.",
      "For example, check out these two statements: \n\n System.out.println(\"Hello, world!\"); \n\nSystem.out.println(\"Welcome to Java.\");",
      "Do you know what they do? Each one displays a message on the screen, but on different lines. Easy, right?!"
    ]
  },
  {
    "npcID": 5,
    "dialogos": [
      "This is getting interesting! Here's a secret about computers: they treat text and numbers differently.",
      "If you want to print a message like 'Hello, adventurer', you need to use double quotes, like this: \n\nSystem.out.println(\"Hello, adventurer\");",
      "But what happens if you want to print a number? In that case, you don't need quotes. Check out this example: \n\n System.out.println(42);",
      "Easy, right? \nBut be careful: if you forget the quotes around the text, your program won't work. What do you think would happen if you write this: \n\n System.out.println(Hello, adventurer);",
      "Exactly, an error! The computer won't understand that it's a text message."
    ]
  },
  {
    "npcID": 6,
    "dialogos": [
      "Attention, adventurer! Java is a very detail-oriented language, and it cares a lot if you use uppercase or lowercase letters. This means you need to be very precise when writing your code.",
      "For example, these two words are not the same for Java:  `System` and `system`",
      "If you try to write this: `system.out.println(\"Hello, world!\");`\nJava will give you an error because it expected you to write `System` with an uppercase 'S'. See? It's like writing a proper name: you can't change the uppercase letters however you want!"
    ]
  },
  {
    "npcID": 7,
    "dialogos": [
      "It's time to talk about the foundation of any Java program: classes!",
      "The first line of a Java program defines a class. For example:  \n\nclass Demo {",
      "Do you see how it starts with the keyword `class`? This tells the computer that all the code you write inside belongs to this class. It's like a box that holds your instructions.",
      "Did you know that you can name the class whatever you want? You could call it `Adventure` or `MyFirstClass`. But there's an important rule: every Java program must be inside a class. Without it, your code won't work.",
      "Don't worry if this sounds complicated now. Later, you'll learn in detail how classes work. For now, just remember that you always start by creating one. Try it out, and you'll see how your program comes to life!"
    ]
  },
  {
    "npcID": 8,
    "dialogos": [
      "Now that you know every Java program needs a class, I'll teach you something important about how to structure it properly. \nTo begin, a class always opens and closes with braces {}. For example:  \n\nclass Demo {  \n}",
      "All the code you want to include in the class must go inside those braces. Think of them as a chest that holds your instructions.",
      "By the way, there are two ways to write the opening brace: right next to the class name or on the line below. Although both are correct, many programmers prefer writing it on the same line to keep the code more compact."
    ]
  },
  {
    "npcID": 9,
    "dialogos": [
      "Now that you've learned about classes, it's time to learn something crucial in any Java program: the main method.",
      "Inside a class, you'll find this line:\n\npublic static void main(String[] args) {",
      "This is the entry point of any Java program, where everything begins. Think of it as the main door through which the program enters action.",
      "Later, when we talk about methods, you'll understand each keyword in this statement. For now, just remember one very important thing: the main method must always be written exactly like this.\n\npublic static void main(String[] args) {"
    ]
  },
  {
    "npcID": 10,
    "dialogos": [
      "Now let's dive deeper into the main method and its structure.",
      "Just like a class, the main method also opens and closes with braces `{}`. For example:\n\npublic static void main(String[] args) {\n|\tSystem.out.println(\"Hi there\");  \n }",
      "All the code you want to be executed when your program starts must go inside those braces. In this example, when you run the program, the println method will be executed, showing the message \"Hi there\" on the screen.",
      "The main method is the central point where the execution of any Java program begins. Remember to structure it correctly."
    ]
  },
  {
    "npcID": 11,
    "dialogos": [
      "All programs need to work with values, and this is where variables play an important role.\nA variable allows you to store a value and assign it a name. This name can be used later in the program to refer to that same value.",
      "For example, imagine you're developing a game and need to keep track of the player's score. You could use a variable to store how many points they've earned.",
      "Variables are essential in any program as they allow data to change and update during execution."
    ]
  },
  {
    "npcID": 12,
    "dialogos": [
      "Variables are a key part of any program, and each one has a type that defines what kind of value it can store.",
      "A variable can hold different types of values, such as text, numbers, or even decimals.",
      "For example, you already know about text values. These are created by enclosing them in double quotes, like: \"this is some text\"",
      "In Java, the text we put between quotes is called *String*. This data type is very useful when you need to work with words, sentences, or any kind of text in your program."
    ]
  },
  {
    "npcID": 13,
    "dialogos": [
      "Now let's learn how to create a variable of type String. \n For example, you could write: \n\nString name;\n",
      "This creates a variable called `name` that can hold values of type String, meaning text.",
      "In programming, this process of creating a new variable is called declaration. It is the first step to start using variables in your program."
    ]
  },
  {
    "npcID": 14,
    "dialogos": [
      "After declaring a variable, you can assign it a value using the assignment operator `=`.",
      "For example, you first declare the variable:\nString name; \nThen you assign it a value: \nname = \"James\";",
      "It is important to remember that the type `String` must always start with an uppercase letter. If you write it with a lowercase letter, the program will give an error."
    ]
  },
  {
    "npcID": 15,
    "dialogos": [
      "There are other data types you can use for your variables.",
      "For example, the `int` type is used to store integer numbers. These are numbers without decimals, like 10, -3, or 42.",
      "In programming, we simply call these integers. They are very useful when you need to work with values like ages, scores, or quantities."
    ]
  },
  {
    "npcID": 16,
    "dialogos": [
      "If you need to work with decimal numbers, the default type you should use is the `double` type.",
      "This data type is ideal for storing values like 3.14, 0.99, or -7.25.",
      "Using `double` allows you to handle numbers that are not integers, which is very useful for more precise calculations or for working with fractions."
    ]
  },
  {
    "npcID": 17,
    "dialogos": [
      "In Java, besides the `double` type, there is another type for working with decimals called `float`.",
      "If you use the `float` type, it's important to add an `f` at the end of the decimal value. For example: \n\nfloat height = 1.94f;",
      "This tells Java that the value should be treated as a `float` and not as a `double`.",
      "This is a crucial detail, as Java, by default, interprets decimals as `double`. The `f` ensures the program understands you are working with a `float`.",
      "The `float` type takes up less memory, but it is not as precise as the `double` type. This means that calculations with `float` are faster, but less accurate in terms of decimal digits. As a general rule, use `float` when memory usage is critical. On the other hand, if you need more precise calculations, such as in monetary operations, it's better to use `double`."
    ]
  },
  {
    "npcID": 18,
    "dialogos": [
      "The `char` type is used to store a single character.",
      "Unlike `String`s, which can contain longer text, a `char` only stores one character, like a letter or a symbol.",
      "To define a `char`, you must use single quotes (') instead of double quotes (\"). For example:\n\nchar initial = 'J';",
      "This data type is useful when you need to work with individual characters instead of whole text strings."
    ]
  },
  {
    "npcID": 19,
    "dialogos": [
      "Another important data type is `boolean`. This type can only contain two values: true or false.",
      "Booleans are very useful when working with states or conditions. For example, you could use a boolean to indicate whether a store is open or closed:\n\n boolean isOpen = true;",
      "This data type is essential for controlling the logic in your programs."
    ]
  },
  {
    "npcID": 20,
    "dialogos": [
      "In Java, you can use common mathematical operators to perform calculations.",
      "These operators include addition (+), subtraction (-), multiplication (*) and division (/).",
      "These operators are fundamental for performing basic operations in any program."
    ]
  },
  {
    "npcID": 21,
    "dialogos": [
      "The results of mathematical operations can be assigned to a variable to use them later in the program.",
      "For example, if you perform an addition, you can store the result like this:\n int total = 5 + 3;\nHere, the variable `total` will store the resulting value, in this case, 8.",
      "This approach is very useful for handling calculations and reusing results in different parts of your code."
    ]
  },
  {
    "npcID": 22,
    "dialogos": [
      "Let's talk about another essential tool in programming math! Did you know you can use Java to perform subtractions easily?",
      "For example, if you want to calculate the difference between two numbers, you could write something like:\n\n int difference = 10 - 4;\nThis will store the result, in this case 6, inside the variable `difference`.",
      "Using the subtraction operator is a practical way to work with numbers and solve problems in your programs."
    ]
  },
  {
    "npcID": 23,
    "dialogos": [
      "Did you know that Java can also help you perform multiplications easily? Using the right operator will allow you to quickly calculate products.",
      "To multiply two values, you can use the `*` operator. For example:\n\n int product = 5 * 3;\nThis will store the result, in this case 15, inside the variable `product`.",
      "Multiplication is a key tool in many programs, whether for basic mathematical calculations or for solving more complex problems."
    ]
  },
  {
    "npcID": 24,
    "dialogos": [
      "Here is another useful tool for your calculations! In Java, you can easily perform divisions using the `/` operator.",
      "For example, if you need to divide two numbers, you could write something like:\n\n int quotient = 10 / 2;\nThis will store the result, in this case 5, inside the variable `quotient`.",
      "Division is especially useful when working with calculations that require splitting or distributing values equally. An essential skill for any programmer!"
    ]
  },
  {
    "npcID": 25,
    "dialogos": [
      "Here is another useful tool for mathematical operations: the modulus operator %. This operator returns the remainder of a division.",
      "For example, if you calculate:\n\n int remainder = 10 % 3;\n The result will be 1, as 10 divided by 3 gives a quotient of 3 and a remainder of 1.",
      "The modulus operator is very practical when you need to work with patterns, cycles, or check if a number is divisible by another. It's an indispensable tool in many algorithms!"
    ]
  },
  {
    "npcID": 26,
    "dialogos": [
      "In Java, you can also work with text dynamically using the `+` operator. This operator allows you to concatenate strings, a process known as concatenation.",
      "For example, if you have a user's first and last names, you could combine them like this:\n\n String fullName = \"Juan\" + \"Perez\";\n This will result in JuanPerez, as the strings are directly joined without a separator. If you want to add a space between them, simply include it as part of the concatenation:\n\n String fullName = \"Juan\" + \" \" + \"Perez\";",
      "Additionally, you can combine strings with other data types like integers or decimals. For example:\n\n String message = \"Age: \" + 25;",
      "Concatenation is a powerful tool for creating personalized messages or working with text flexibly in your programs."
    ]
  },
  {
    "npcID": 27,
    "dialogos": [
      "Let's talk about something very important for making your code clearer: comments. \n Comments are annotations within the code that explain what each part does. They are like little notes for you or for other programmers working on the same project. \n While the code is interpreted by the computer, comments are meant for humans reading it.",
      "In Java, you can write single-line comments using //:\n\n // This is a single-line comment",
      "You can also write multi-line comments using /* and */:\n /* This is a comment that spans\n multiple lines */\nComments are essential for keeping the code clear, organized, and easy to understand."
    ]
  },
  {
    "npcID": 28,
    "dialogos": [
      "In programming, a single-line comment starts with two slashes // and extends to the end of the line.",
      "For example, if you want to explain a part of your code, you can write something like:\n\n int age = 25; // Variable to store the age of a person",
      "Adding comments while writing the code is highly recommended. They help clarify the purpose of each section and make it easier to understand when you need to review your work later.",
      "Additionally, comments are very useful for other programmers who might read or collaborate on your code, as they provide context and make it easier to understand your logic."
    ]
  },
  {
    "npcID": 29,
    "dialogos": [
      "In addition to explaining the code, you can also use comments to deactivate lines of code you don't want to execute at the moment.",
      "This is especially useful when you're working on something that isn't finished yet or if you want to test the program without deleting those lines. For example:\n\n // int age = 25;\n\nIn this case, the line is commented out and will be ignored when running the program, as if it weren't there.",
      "This technique is very useful for testing, keeping your work organized, or saving code you might need later without affecting the current operation of the program."
    ]
  },
  {
    "npcID": 30,
    "dialogos": [
      "In Java, if you need to write a comment that spans multiple lines, you can use the symbols /* and */",
      "Everything between these symbols will be treated as a comment. For example:\n /* This is a comment that spans\n multiple lines */",
      "You can also use this format to comment out multiple lines of code if you need to deactivate them temporarily. For example:\n /* int age = 25;\n String name = \"Juan\"; */",
      "This is very useful for working with complete sections of code during testing or when you want to leave more detailed notes for yourself or other programmers."
    ]
  },
  {
    "npcID": 31,
    "dialogos": [
      "Conditional statements are fundamental in programming because they allow a program to make decisions based on different situations.\nFor example, imagine a billing program. It could apply a discount to the total only if the amount exceeds a certain threshold: \n\nif (total > 100) {\n|\t discount = total * 0.1;\n }",
      "This means that if the total is greater than 100, a discount will be calculated and applied. If not, the program will do nothing in this case.",
      "Conditional statements are key to creating dynamic and flexible programs that respond to different scenarios. Let's learn how to implement them correctly!"
    ]
  },
  {
    "npcID": 32,
    "dialogos": [
      "One of the most commonly used tools to make decisions in a program is the `if` statement.\nThe `if` statement executes a block of code only if its condition is true. This allows the program to act specifically based on a given situation.",
      "The basic syntax of an `if` is as follows:\nif (condition) {\n|\t // code to execute if the condition is true\n }\n",
      "For example, if you want to check if a number is positive:\n if (number > 0) {\n|\tSystem.out.println(\"The number is positive.\");\n }\nThis is a fundamental pillar in decision-making within any program."
    ]
  },
  {
    "npcID": 33,
    "dialogos": [
      "To create conditions in an `if` statement, you can use different comparison operators depending on what you need to evaluate.\nHere is a list of the most common operators:\n< less than\n> greater than\n!= not equal to\n== equal to\n<= less than or equal to\n>= greater than or equal to",
      "For example, if you want to check if a number is greater than or equal to 18, you could write:\n if (age >= 18) {\n|\tSystem.out.println(\"You are of legal age.\");\n}",
      "These operators allow you to create precise and flexible conditions to control the flow of your program."
    ]
  },
  {
    "npcID": 34,
    "dialogos": [
      "It's important to remember a key detail when checking equality in Java: you must use two equal signs (==) in conditions. For example, if you want to check if two values are equal:\nif (x == y) {\n|\t System.out.println(\"The values are equal.\");\n }",
      "Using a single equal sign (=) does not work for comparisons, as this operator is used to assign values to variables.",
      "This is a common mistake when starting to program, so pay attention to this detail to avoid problems in your conditions."
    ]
  },
  {
    "npcID": 35,
    "dialogos": [
      "In Java, an `if` statement can be accompanied by an additional option called `else`. This allows you to execute a different block of code when the condition in the `if` turns out to be false. For example:\n if (age > 30) {\n|\t System.out.println(\"You are over 30.\");\n} else {\n|\t System.out.println(\"You are 30 or younger.\");\n }\n",
      "If the `age` variable is equal to 30, the condition in the `if` will evaluate as false, and the block inside the `else` will execute instead.",
      "Using `else` is ideal for handling all possibilities when you need the program to make a decision in any case."
    ]
  },
  {
    "npcID": 36,
    "dialogos": [
      "In Java, you can use an `if-else` statement inside another to handle more complex situations. This is called nesting, and it is useful for evaluating multiple related conditions.",
      "However, be careful, as too many nested `if-else` statements can make the code harder to read and understand.",
      "Whenever possible, try to simplify these structures to maintain clarity in your program."
    ]
  },
  {
    "npcID": 37,
    "dialogos": [
      "Instead of nesting multiple if-else statements, you can use else if to evaluate several conditions more clearly and in an organized manner. The else if structure allows you to check additional conditions after an if, keeping the code more readable.",
      "You can include as many else if blocks as needed, ensuring that you cover all relevant possibilities in your program.",
      "This approach is ideal for handling complex decisions without complicating the code flow too much."
    ]
  },
  {
    "npcID": 38,
    "dialogos": [
      "You already know the basics of making decisions in your code. Here’s a summary of the key points: \nYou can check a condition using the `if` statement.",
      "If the condition turns out to be false, you can use an `else` block to execute alternative code.",
      "You can also use `else if` to handle multiple conditions in an organized manner. The generic structure is as follows:\nif (condition) {  \n|\t  // code to execute if the condition is true  \n} else if (condition) {  \n|\t  // code to execute if this other condition is true  \n} else {  \n|\t  // code to execute if none of the previous conditions are true  \n}",
      "These tools are essential for creating programs that can respond to different situations. In upcoming lessons, you'll learn more ways to make decisions."
    ]
  },
  {
    "npcID": 39,
    "dialogos": [
      "Instead of using many if-else statements, which can make the code hard to read, you can opt for a switch statement.\nThe switch statement checks if a variable is equal to one of the values specified in different cases.",
      "When it finds a matching case, it executes the code associated with that case until it encounters a break statement.",
      "You can include as many cases as needed within a switch, and each case is followed by the value it should match and a colon (:).\nThis approach makes your code clearer and easier to maintain, especially when working with multiple conditions based on a single variable."
    ]
  },
  {
    "npcID": 40,
    "dialogos": [
      "In a switch statement, it’s crucial to include a break statement after each case.\nIf you don’t add a break, the program will continue executing the following cases, even if the values don’t match the evaluated variable.",
      "This can cause undesired behavior in your program as it will execute more code than necessary.",
      "Using break ensures that the program exits the switch once it has executed the corresponding case’s code, keeping the flow controlled and predictable."
    ]
  },
  {
    "npcID": 41,
    "dialogos": [
      "A switch statement can include an optional case called default.\nThe default case executes when none of the specified cases match the value of the evaluated variable.",
      "It’s not necessary to include a break in the default case, as it is always the last instruction inside the switch.",
      "Using default is a good practice to handle unexpected situations or values not anticipated, ensuring your program always has a defined behavior."
    ]
  },
  {
    "npcID": 42,
    "dialogos": [
      "Some programs need to interact directly with users, getting inputs to customize their behavior.\nFor example, a game might ask you to enter a nickname and then display it on the screen, or a converter might ask for a value to convert.",
      "In Java, there are several ways to capture user input, from the console to more advanced interfaces.",
      "Learning to handle these inputs is essential to create interactive and personalized programs. Get ready to discover how to do it!"
    ]
  },
  {
    "npcID": 43,
    "dialogos": [
      "When a program needs to receive data from the user, the first thing you must do is import the appropriate class.\nIn Java, this is done with the following line, which should be placed at the beginning of the code, before the class declaration:\n\nimport java.util.Scanner;",
      "This line imports the Scanner class, a tool we will use to capture user input.",
      "The Scanner class is a simple and efficient way to get data from the console, making your program more interactive."
    ]
  },
  {
    "npcID": 44,
    "dialogos": [
      "Once you’ve imported the Scanner class, the next step is to create an object of this class to use it.\nThis is done with the following line of code:\n Scanner sc = new Scanner(System.in);",
      "Terms like classes, objects, and importing may sound a bit confusing right now, but don’t worry. You’ll learn more about them in advanced lessons.",
      "For now, just remember this structure to create the Scanner object. It’s the key to capturing user input in your program."
    ]
  },
  {
    "npcID": 45,
    "dialogos": [
      "It’s time to capture the user’s input and assign it to a variable!\nAfter creating the Scanner object, you can use it to read the user’s input. For example, if you want to capture a name, you can write:\n\n String name = sc.nextLine();\n",
      "Here, the nextLine() method takes everything the user types and stores it in the name variable.",
      "This process allows the program to be more interactive, as it can work with the information provided by the user."
    ]
  },
  {
    "npcID": 46,
    "dialogos": [
      "In addition to text, you can also capture numbers or other data types from the user’s input using specific methods from the Scanner class. For example, to read an integer, you can use:\n int age = sc.nextInt();\n This will allow the user to enter a number, and the program will store it in the age variable.",
      "Similarly, you can use methods like nextDouble(), nextFloat(), or nextBoolean() to capture other data types, such as decimal numbers or boolean values (true or false).",
      "This flexibility makes Scanner a powerful tool for handling different types of input in your programs."
    ]
  },
  {
    "npcID": 47,
    "dialogos": [
      "With a single Scanner object, you can capture multiple user inputs, making it very practical for interactive programs. For example, if you want to capture a name and an age, you could write:\n String name = sc.nextLine();\n int age = sc.nextInt();",
      "In this case, the user will enter the name first and then the age. If you are working in a programming environment that uses pop-up windows, you’ll need to provide each input on a new line.",
      "This allows you to collect different types of information easily, using the same Scanner object for all the necessary inputs."
    ]
  },
  {
    "npcID": 48,
    "dialogos": [
      "This is how you can capture user information in Java. Here are the key steps:",
      "First, import the java.util.Scanner class:\n import java.util.Scanner;",
      "Then, create a Scanner object to handle the input:\n Scanner sc = new Scanner(System.in);",
      "Finally, use the appropriate method from the Scanner object to capture the information. For example:\nString name = sc.nextLine(); for text.\nint age = sc.nextInt(); for integers.\nThese steps make your programs interactive and able to work with data provided by the user."
    ]
  },
  {
    "npcID": 49,
    "dialogos": [
      "Sometimes, it's necessary to combine multiple conditions into a single statement to make more complex decisions. For example, if you want to check if an age is between 18 and 50, you can use the logical operator && (AND):\n if (age > 18 && age < 50)\n",
      "In this case, both conditions must be true for the code block to execute.",
      "The && operator is very useful for evaluating multiple requirements simultaneously and ensuring all conditions are met before proceeding."
    ]
  },
  {
    "npcID": 50,
    "dialogos": [
      "The logical operator || (OR) is used to check if at least one of the conditions is true. For example, if you want to check if a person meets one of two requirements, like being older than 18 years or taller than 150 cm, you could use:\n if (age > 18 || height > 150)\n",
      "If either of the two conditions is true, the code block will execute.",
      "This operator is ideal when you need at least one condition to be met in order to proceed with your program."
    ]
  },
  {
    "npcID": 51,
    "dialogos": [
      "The logical operator ! (NOT) is used to invert the value of a condition. If a condition is true, the ! operator makes it false, and vice versa.",
      "For example, if you need to check if an age is not greater than 18, you could write:\n if (!(age > 18))\n This reads as: \"If the age is not greater than 18\"",
      "This operator is very useful when you want to execute code only if a specific condition is not met, helping you handle opposite cases efficiently."
    ]
  },
  {
    "npcID": 52,
    "dialogos": [
      "You can chain multiple conditions into a single statement using parentheses and logical operators like && and ||. Parentheses allow grouping conditions so the program evaluates them in the correct order.",
      "For example, if you want to check if someone lives in \"US\" or \"GB\" and their age is between 1 and 99 years, you could write:\n if ((country == \"US\" || country == \"GB\") && (age > 0 && age < 100))",
      "This ensures that both grouped conditions are evaluated correctly, making your logic clear and precise."
    ]
  },
  {
    "npcID": 53,
    "dialogos": [
      "Loops are very useful tools in programming because they allow you to repeat a block of code multiple times.\n For example, a banking application could use a loop to check all the transactions of a user and verify if they meet certain conditions.",
      "This ability to iterate over data makes loops essential for automating repetitive tasks and processing large amounts of information efficiently.",
      "There are different types of loops in Java, each suitable for different scenarios, such as repeating a fixed number of times or iterating over a list of items."
    ]
  },
  {
    "npcID": 54,
    "dialogos": [
      "A while loop repeatedly executes a block of code as long as the specified condition is true. For example, in the following code:\nint x = 3;\nwhile (x > 0) {\n|\t    System.out.println(x);\n|\tx = x - 1;\n}\nThe loop checks if x > 0. If true, it executes the code inside the loop body and then checks the condition again.",
      "In this case, the code will print the numbers from 3 to 1 and stop when x reaches 0, as the condition becomes false.",
      "It's essential to update the variable controlling the loop (in this case, x = x - 1). Without this line, the condition would never change, and the loop would run infinitely."
    ]
  },
  {
    "npcID": 55,
    "dialogos": [
      "In Java, it's common to increase or decrease the value of a variable by 1 during loops. To simplify this process, you can use the increment (++) and decrement (--) operators.\nFor example, the line x = x - 1; can be written more concisely as x--;.\nThe same principle applies to increase the value of a variable: instead of writing x = x + 1;, you can write x++;",
      "In the following code:\nint x = 3;\nwhile (x > 0) {\n|\tSystem.out.println(x);\n|\tx--;\n}\n\nThe -- operator reduces the value of x by 1 in each iteration, achieving the same result with less writing and greater clarity.",
      "In some loops, you may need to increment or decrement a variable by a value other than 1. For example, if you want to print only the even numbers from 0 to 10, you can use the following code:\nint x = 0;\nwhile (x <= 10) {\n|\tSystem.out.println(x);\n|\tx = x + 2;\n}\n",
      "To simplify, you can write x = x + 2; as x += 2;. This shorthand operator makes the code cleaner and more readable.\nSimilarly, there are shorthand operators for other mathematical operations, such as -= for subtraction, *= for multiplication, and /= for division. These operators are very handy for writing loops efficiently."
    ]
  },
  {
    "npcID": 56,
    "dialogos": [
      "Loops not only allow iteration but are also ideal for performing repeated calculations. For example, to calculate the sum of the numbers from 1 to 100, you can use a loop like this:\nint sum = 0;\nint num = 0;\n\nwhile (num <= 100) {\n|\tsum += num;\n|\tnum++;\n}\nSystem.out.println(sum);",
      "In this code, the variable num increases in each iteration, and its value is added to sum. At the end of the loop, sum will contain the result of our operation.",
      "Note that the instruction System.out.println(sum); is outside the loop body. This ensures that the final result is printed only after the loop has finished."
    ]
  },
  {
    "npcID": 57,
    "dialogos": [
      "A variant of the while loop in Java is the do-while loop, which ensures that the code block is executed at least once before checking the condition. The structure of a do-while loop looks like this:\n int x = 1;\ndo {\n|\tSystem.out.println(x);\n|\tx++;\n} while (x < 5);\n",
      "Unlike the while loop, in the do-while loop, the condition is evaluated at the end of the loop. This means that the code inside the block will execute once, even if the condition is false from the beginning.",
      "Remember to include the semicolon (;) after the while condition, as it is required in this structure. This type of loop is useful when you need to ensure that an operation occurs at least once before validating the condition."
    ]
  },
  {
    "npcID": 58,
    "dialogos": [
      "Attention, adventurer! Let me tell you about the for loop, a very useful tool in programming.\nThis loop is used when you need to repeat a block of code a defined number of times, keeping everything organized in a compact structure.",
      "For example, if you wanted to print the numbers from 1 to 4, you could do it like this:\nfor (int x = 1; x < 5; x++) {\n|\tSystem.out.println(x);\n}\n",
      "Inside the loop, you define three parts: the initialization (int x = 1), the condition (x < 5), and how to update the variable (x++). This allows precise control over how many times the code runs."
    ]
  },
  {
    "npcID": 59,
    "dialogos": [
      "The for loop consists of three important parts you should know. The first part initializes the loop variable. For example, in int x = 1, you define the initial value of x. This part runs only once, at the beginning of the loop.",
      "The second part is the condition that controls the loop. In this case, x < 5 checks if the loop should continue. If the condition is false, the loop stops. The third part is the variable update, like x++, which runs at the end of each iteration to prepare for the next.",
      "Don't forget the semicolons (;) that separate these three parts in the loop declaration. They are essential for the loop to function properly."
    ]
  },
  {
    "npcID": 60,
    "dialogos": [
      "Listen closely, adventurer! The for loop is very flexible, allowing you to use any type of condition and increment as needed. For example, if you only want to print the even numbers between 0 and 10, you could do it like this:\nfor (int x = 0; x <= 10; x += 2) {\n|\tSystem.out.println(x);\n}\n",
      "Here, the condition x <= 10 ensures the loop stops when it reaches 10, and the increment x += 2 adds 2 to the variable in each iteration.",
      "The for loop is ideal when you know in advance how many times you need to repeat a block of code. This feature makes it a key tool for controlled and organized tasks."
    ]
  },
  {
    "npcID": 61,
    "dialogos": [
      "Do you remember the break statement you learned in switch? You can also use it to end a loop before its condition becomes false.",
      "int x = 1;\nwhile (x < 10) {\n|\tSystem.out.println(x);\n|\tif (x == 4) {\n|\t|\tbreak;\n|\t|\t}\n|\tx++;\n}\nThis loop will stop when x reaches the value 4, ignoring the rest of the iterations.",
      "A practical case would be in a calculator, where you take numbers from the user to sum them. If the user types \"stop\", you could use break to end the loop and exit the program.",
      "The break statement is a very powerful tool for controlling the flow of your loops, ensuring you can stop them when necessary."
    ]
  },
  {
    "npcID": 62,
    "dialogos": [
      "Adventurer, another useful tool to control loops is the continue statement. This instruction causes the loop to skip the current iteration and move directly to the next one. For example:\nfor (int x = 10; x <= 40; x += 10) {\n|\tif (x == 30) {\n|\t|\tcontinue;\n|\t}\n|\tSystem.out.println(x);\n}\nIn this case, the value 30 will be skipped because the continue statement skips the corresponding iteration.",
      "A practical case would be in an airline ticket system that calculates the total cost for all passengers. If children under 3 years old travel for free, you can use a loop to iterate over the list of passengers and a continue statement to skip the children.",
      "This instruction is very useful when you need to ignore certain specific cases without stopping the entire loop."
    ]
  },
  {
    "npcID": 63,
    "dialogos": [
      "Adventurer, imagine that you need to store the ages of 10 users. Using a separate variable for each age would be inefficient and tedious. This is where arrays come to the rescue. An array allows you to store multiple values in a single variable, making your code much more organized and easier to manage. For example, instead of creating 10 separate variables, you can use an array to store the ages of all users in one place. Arrays are especially useful when working with large amounts of data that need to be processed together. They are a key tool in efficient programming!",
      "In programming, an array must be declared in a similar way to a variable, indicating the type of elements it will store. To declare an array, you define the type of its elements followed by square brackets:\n int[] ages;\n In this case, the name of the array is ages, and its type indicates that it will store integer (int) values.",
      "This declaration only defines the array, but it does not initialize it with values. Later, you will learn how to assign and work with the elements of an array."
    ]
  },
  {
    "npcID": 64,
    "dialogos": [
      "To create an array, you need to specify how many elements it will store using the keyword new. For example:\n\nint[] ages;\nages = new int[5];\nThis creates an array of 5 integers, ready to be used.",
      "You can also combine these two lines into one for clarity:\n\n int[] ages = new int[5];\n",
      "This approach is common when you know the size of the array you need from the beginning. Now you're ready to store multiple values in a single structure!"
    ]
  },
  {
    "npcID": 65,
    "dialogos": [
      "The elements of an array are accessed using their position, also known as an index.\nFor example, to assign the value 25 to the element at position 2 of an array called ages, you can write:\n ages[2] = 25;",
      "The index is specified inside square brackets next to the array name. Remember that in Java, indexes start at 0, so the first element is at position 0.",
      "This approach allows you to access and modify individual values within the array quickly and efficiently."
    ]
  },
  {
    "npcID": 66,
    "dialogos": [
      "In an array, index 2 corresponds to the third element. This happens because indexes in Java start at 0.\n For example, in an array of 5 elements (int[5]), the first element has index 0, and the last one has index 4.",
      "If you want to assign a value to the first element, you can do it like this:\nages[0] = 18;\n\nTo access the value of an element, use the index as well. For example:\nSystem.out.println(ages[2]);",
      "System.out.println(ages[2]);\n\n In this case, the value assigned to the third element (ages[2] = 25) will be displayed on the screen. Always remember to consider the indexes when working with arrays to avoid errors."
    ]
  },
  {
    "npcID": 67,
    "dialogos": [
      "If you already know the values you want to store in an array, you can declare it and assign its values in one line using a comma-separated list enclosed in curly braces.\nFor example:\n\nString[] names = { \"A\", \"B\", \"C\", \"D\" };\nSystem.out.println(names[2]);\nThis code automatically creates an array of 4 elements and assigns the specified values.",
      "Although sometimes you may see the square brackets placed after the array name (for example, String names[]), the preferred form is to place them after the data type, as in String[] names.",
      "This method is ideal for quickly and clearly initializing arrays when you know the values you need to store in advance."
    ]
  },
  {
    "npcID": 68,
    "dialogos": [
      "To display the elements of an array using a loop, you first need to know how many elements it stores. Arrays have a property called length, which indicates the number of elements it contains. You can access this property like this:\n int[] ages = {18, 33, 24, 64, 45};\nSystem.out.println(ages.length);\n\nThis code will print the total number of elements in the array, which in this case is 5.",
      "This property is especially useful when iterating through an array with a loop, as it ensures you won't attempt to access indexes outside of its range.",
      "Using length allows you to work with arrays flexibly, no matter how many elements they store."
    ]
  },
  {
    "npcID": 69,
    "dialogos": [
      "Once you know how many elements an array has, you can use a for loop to iterate through it and display all its elements. For example, with this code:\nint[] ages = {18, 33, 24, 64, 45};\nfor (int x = 0; x < ages.length; x++) {\n|\tSystem.out.println(ages[x]);\n}\n\nIn this case, the variable x in the loop is used as the index of the array. On each iteration, the next element of the array is accessed and displayed on the screen.",
      "This approach ensures that you iterate through all the elements of the array, from index 0 to index length - 1, in an efficient and organized manner."
    ]
  },
  {
    "npcID": 70,
    "dialogos": [
      "You can also use a for loop to perform calculations with the values of an array. For example, to calculate the sum of all elements. Observe this code:\n int[] ages = {18, 33, 24, 64, 45};\nint sum = 0;\nfor (int x = 0; x < ages.length; x++) {\n|\tsum += ages[x];\n}\nSystem.out.println(sum); \nHere, we declare a sum variable to store the result, initializing it to 0. Then, the for loop iterates through the array and adds each element to sum.",
      "This approach is very useful when you need to calculate totals, averages, or other operations based on the values of an array."
    ]
  },
  {
    "npcID": 71,
    "dialogos": [
      "Java offers a simpler version of the for loop, called for-each, which is used to iterate through arrays in a shorter and more readable way. Here is a basic example:\nint[] nums = {2, 3, 5, 7};\nfor (int x : nums) {\n|\tSystem.out.println(x);\n}\nThe loop iterates through each element of the array nums, assigning its value to the variable x on each iteration.",
      "You can use any name for the variable, but always remember to place a colon (:) between the variable and the array. This is interpreted as \"for each x in nums\". Here is another example to calculate the sum of the values in an array:\nint[] ages = {18, 33, 24, 64, 45};\nint sum = 0;\nfor (int x : ages) {\n|\tsum += x;\n}\nSystem.out.println(sum);\nIn this case, the loop directly accesses the values, but not the index of each element. The for-each approach is ideal when you only need the values of the array, not their position."
    ]
  },
  {
    "npcID": 72,
    "dialogos": [
      "Multidimensional arrays, also called matrices, allow you to work with data organized in multiple dimensions or indexes.\nImagine a program that stores seat numbers in a stadium (rows and columns) or a chessboard, where each square has two coordinates: a letter and a number. In these cases, you will need a two-dimensional array.",
      "To create a matrix, you can use two pairs of square brackets:\nint[][] sample = { {1, 2, 3}, {4, 5, 6} };\n\nHere, the matrix sample has two rows: the first contains the numbers {1, 2, 3} and the second {4, 5, 6}.",
      "Multidimensional arrays are very useful for representing tables, graphs, or more complex structures in your programs."
    ]
  },
  {
    "npcID": 73,
    "dialogos": [
      "To access an element in a matrix (multidimensional array), you need to provide two indexes: one for the row and another for the column. For example, in the following matrix: \n int[][] sample = { {1, 2, 3}, {4, 5, 6} };\nIf you want to access the first element of the second row, you can use:\nint x = sample[1][0];\nSystem.out.println(x);\nThis will print 4, since sample[1] refers to the second row, and [0] selects the first element of that row.",
      "This approach allows you to navigate and work with data organized in rows and columns, such as tables or boards."
    ]
  },
  {
    "npcID": 74,
    "dialogos": [
      "In a matrix (multidimensional array), the two indexes are called row index and column index.",
      "Visualize the matrix as a table: each row is an array, and each column represents a value within that row. For example:\nint[][] sample = { \n|\t    {1, 2, 3}, \n|\t   {4, 5, 6} \n}; \nint x = sample[1][0];\nSystem.out.println(x);\nHere, sample[1] selects the second row ({4, 5, 6}), and [0] accesses the first element of that row (4).",
      "This approach is ideal for representing organized structures like tables, game boards, or data in grids."
    ]
  },
  {
    "npcID": 75,
    "dialogos": [
      "To traverse a matrix (multidimensional array), you need to use nested loops.\nThe first loop traverses the rows of the matrix, while the second loop traverses the elements within each row.",
      "For example:\nint[][] sample = {\n|\t{1, 2, 3},\n|\t{4, 5, 6}\n};\nfor (int x = 0; x < sample.length; x++) {\n|\tfor (int y = 0; y < sample[x].length; y++) {\n|\t|\tSystem.out.println(sample[x][y]);\n|\t}\n}",
      "This code will print all the elements of the matrix, starting with the first row and continuing with the second. It's an efficient way to work with structures organized in rows and columns."
    ]
  },
  {
    "npcID": 76,
    "dialogos": [
      "A method is a block of code designed to perform a specific task within a program.\nFor example, in an application you might have methods like login(), logout() or convert(), each one responsible for a specific function.",
      "Even println(), which we've used to display information on the screen, is a method.\n\n The main advantage of methods is that you define them once and then can call them as many times as you need, making your code more organized, reusable, and easier to maintain."
    ]
  },
  {
    "npcID": 77,
    "dialogos": [
      "You can define your own methods to perform the tasks you want in your program. For example, the following method prints three lines of text:\nstatic void welcome() {\n|\tSystem.out.println(\"Hello\");\n|\tSystem.out.println(\"I am a method\");\n|\tSystem.out.println(\"End of the method\");\n}",
      "In this case: \n- static is used so you can call the method directly from main. You will learn more about this keyword later.\n- void indicates that the method does not return any value. Later you will learn about methods with return values.\n- welcome is the name of the method, and it is always followed by parentheses ().\n\nstatic void welcome()",
      "Methods make your code more organized and easier to reuse, as you can call them when you need to perform a specific task."
    ]
  },
  {
    "npcID": 78,
    "dialogos": [
      "After defining a method, you can use it in your program simply by 'calling' it.\nTo call a method, write its name followed by a pair of parentheses ().",
      "For example:\npublic class Demo {\n|\tstatic void welcome() {\n|\t|\tSystem.out.println(\"Welcome\"); \n|\t|\tSystem.out.println(\"I am a method\"); \n|\t|\tSystem.out.println(\"End of the method\"); \n|\t}\n|\tpublic static void main(String[] args) {\n|\t|\twelcome();\n|\t}\n}",
      "When you run the program, the line welcome(); calls the method, which causes it to execute and display the three lines of text defined inside it.\nMethods are an efficient way to organize and reuse blocks of code in your programs."
    ]
  },
  {
    "npcID": 79,
    "dialogos": [
      "A method can be called as many times as needed within your program, making it very useful for performing repetitive tasks. For example:",
      "public class Demo {\n|\tstatic void welcome() {\n|\t|\tSystem.out.println(\"Welcome\"); \n|\t|\tSystem.out.println(\"I am a method\"); \n|\t|\tSystem.out.println(\"End of the method\"); \n|\t}\n|\tpublic static void main(String[] args) {\n|\t|\twelcome(); // First call to the method\n|\t|\t//Some other code here\n|\t|\twelcome(); // Second call to the method\n|\t}\n}",
      "In this example, the method welcome() is called twice, which causes its block of code to execute on both occasions.\nThis ability to reuse methods simplifies your program and prevents you from having to write the same code multiple times."
    ]
  },
  {
    "npcID": 80,
    "dialogos": [
      "Methods can have parameters, which work like variables used within the method's code. Parameters are defined inside the method's parentheses. For example:\nstatic void welcome(String name) {\n|\tSystem.out.println(\"Welcome, \" + name);\n}\nIn this example, the method welcome() is called twice, which causes its block of code to execute on both occasions.\nThis ability to reuse methods simplifies your program and prevents you from having to write the same code multiple times.",
      "Parameters make methods more flexible and reusable, allowing them to perform dynamic tasks based on the values you pass when calling them."
    ]
  },
  {
    "npcID": 81,
    "dialogos": [
      "When you call a method that has parameters, you need to pass values inside the parentheses. These values are known as arguments.\n For example:",
      "In this case, the method welcome generates personalized results based on the arguments passed. When called with \"James\", it prints \"Welcome, James\". When called with \"Amy\", it prints \"Welcome, Amy\".\nclass Demo {\n|\tstatic void welcome(String name) {\n|\t|\tSystem.out.println(\"Welcome, \" + name);\n|\t}\n|\tpublic static void main(String[] args) {\n|\t|\twelcome(\"James\"); // Call with the argument \"James\"\n|\t|\twelcome(\"Amy\"); // Call with the argument \"Amy\"\n|\t}\n}",
      "Using arguments allows methods to be more dynamic and versatile, adapting to different situations in your program."
    ]
  },
  {
    "npcID": 82,
    "dialogos": [
      "A method can accept multiple parameters, separated by commas within the parentheses. This allows you to perform more complex and flexible tasks.\nFor example, this method takes a String and an int as parameters:\nstatic void welcome(String name, int age) {\n|\tSystem.out.println(\"Welcome, \" + name);\n|\tSystem.out.println(\"You are: \" + age + \" years old\");\n}",
      "When calling the method, you need to provide the corresponding arguments in the same order as the parameters:\nclass Demo {\n|\tpublic static void main(String[] args) {\n|\t|\twelcome(\"James\", 42); // Call with the arguments \"James\" and 42\n|\t|\twelcome(\"Amy\", 25);   // Call with the arguments \"Amy\" and 25\n|\t}\n}",
      "It is important that the arguments match the type and order of the parameters defined in the method. This ensures that the method works correctly and produces the expected results."
    ]
  },
  {
    "npcID": 83,
    "dialogos": [
      "Method parameters are incredibly useful because they allow a method to work with different values and generate dynamic results.\n For example, you can create a method to calculate a specific percentage of a number:\n",
      "class Demo {\n|\tstatic void perc(double num, int percentage) {\n|\t|\tdouble res = num * percentage / 100;\n|\t|\tSystem.out.println(res);\n|\t}\n|\tpublic static void main(String[] args) {\n|\t|\tperc(530, 23); // Call the method with the values 530 and 23\n|\t}\n}\nIn this case, the method perc takes a number (num) and a percentage (percentage) as parameters, calculates the result, and prints it.",
      "This approach makes your methods more versatile, as they can work with different arguments and produce results tailored to various situations."
    ]
  },
  {
    "npcID": 84,
    "dialogos": [
      "The methods we've seen so far display their results directly, but in some cases, you might need a method to return a value so you can assign it to a variable or use it elsewhere in the program.\n To do this, you need to change the return type of the method. For example, instead of using void, you can specify a type like double so that the method returns a numerical value:\nstatic double perc(double num, int percentage) {\n|\t.........\n}\nThis means that the method perc will return a value of type double, rather than simply printing it.",
      "This approach is useful when you need to work with the result in other operations or store it for later use. Continue and you will learn more about how to use returned values."
    ]
  },
  {
    "npcID": 85,
    "dialogos": [
      "For a method to return a result, you can use the return keyword.\nFor example, this method calculates a percentage and returns the result:\nstatic double perc(double num, int percentage) {\n|\tdouble res = num * percentage / 100;\n|\treturn res;\n}",
      "The return keyword ends the execution of the method and sends the calculated value back to where it was called.",
      "Keep in mind that any statement after return within the method will not be executed, as the method ends at that point."
    ]
  },
  {
    "npcID": 86,
    "dialogos": [
      "Once you've created a method that returns a value, you can call it in your program and assign the result to a variable to use it later.\nFor example:\n",
      "class Demo {\n|\tstatic double perc(double num, int percentage) {\n|\t|\tdouble res = num * percentage / 100;\n|\t|\treturn res;\n|\t}\n|\tpublic static void main(String[] args) {\n|\t|\tdouble x = perc(530, 23); // Call the method and assign the result to 'x'\n|\t|\tSystem.out.println(\"Result is: \" + x);\n|\t}\n}",
      "This approach is useful when you don't need to print the result directly but need to work with it within your program.\nFor example, a method withdraw() in a bank account might return the remaining balance, allowing you to use that value for other operations."
    ]
  },
  {
    "npcID": 87,
    "dialogos": [
      "You can create a method that takes an integer parameter, checks if a grade is greater than or equal to 70, and returns a boolean value.\n\n For example:",
      "class Demo {\n|\tstatic boolean check(int grade) {\n|\t|\treturn grade >= 70;\n|\t}\n|\tpublic static void main(String[] args) {\n|\t|\tint x = 89;\n|\t|\tif (check(x)) {\n|\t|\t|\tSystem.out.println(\"You pass the course\");{\n|\t|\t} else {\n|\t|\t|\tSystem.out.println(\"You fail the course\");\n|\t|\t}\n|\t}\n}",
      "Since the method check returns a boolean value, you can use it directly in an if statement.\nThis approach is very practical: if you need to change the logic of the check in the future, you only need to modify the method, keeping the rest of the program intact."
    ]
  },
  {
    "npcID": 88,
    "dialogos": [
      "Hello again, brave adventurer! You have finally reached the imposing mansion of Bugger. The air here is heavy, filled with the evil that emanates from the shadows and the bugs his army has sown throughout the kingdom. I hope you have learned everything we've taught you, because you will need it more than ever in this final confrontation. Remember, the Java knowledge you've gained is your most powerful weapon. Every line of code, every algorithm, every programming concept will become a tool to defeat the evil Bugger. I trust you will be able to face him, debug, and destroy each of the obstacles he has set for you. The final battle is near! Your learnings, your perseverance, and your courage will be what make the difference. You are about to face the greatest evil of all, but I know you're capable. Good luck, adventurer. May the code be with you, and may you save the kingdom once and for all!"
    ]
  }
]




